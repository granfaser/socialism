// server.js
const express = require('express');
const session = require('express-session');
const fs = require('fs').promises;
const path = require('path');

const app = express();
const PORT = process.env.PORT || 3000;

// --- Configuration - Use Environment Variables ---
const DATA_DIR = path.join(__dirname, 'data');
const NEWS_FILE_PATH = path.join(DATA_DIR, 'news.json');

// –î–ª—è Vercel —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ —ç—Ç–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –≤ Project Settings -> Environment Variables
const ADMIN_USERNAME = process.env.ADMIN_USERNAME || 'RussianSocialist6';
const ADMIN_PASSWORD = process.env.ADMIN_PASSWORD || 'RussianSocialist1234567890';
const SESSION_SECRET = process.env.SESSION_SECRET || 'your_very_secret_key_change_this_again_please_really';

if (SESSION_SECRET === 'your_very_secret_key_change_this_again_please_really' && process.env.NODE_ENV === 'production') {
    console.warn("–ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–ï: –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Å–µ–∫—Ä–µ—Ç —Å–µ—Å—Å–∏–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –≤ –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –Ω–∞–¥–µ–∂–Ω—É—é –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è SESSION_SECRET.");
}
// --- End Configuration ---

app.use(express.json());
app.use(express.urlencoded({ extended: true }));

app.use(session({
    secret: SESSION_SECRET,
    resave: false,
    saveUninitialized: true,
    // Vercel —Ä–∞–±–æ—Ç–∞–µ—Ç –ø–æ HTTPS, –ø–æ—ç—Ç–æ–º—É –≤ –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ cookie –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å secure
    cookie: { secure: process.env.NODE_ENV === 'production' }
}));

// –û–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏—Ö —Ñ–∞–π–ª–æ–≤ –∏–∑ –ø–∞–ø–∫–∏ 'public'
app.use(express.static(path.join(__dirname, 'public')));

async function ensureDataDirExists() {
    try {
        await fs.mkdir(DATA_DIR, { recursive: true });
    } catch (error) {
        if (error.code !== 'EEXIST') { // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º, –µ—Å–ª–∏ –ø–∞–ø–∫–∞ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
            console.error("–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é data.", error);
            throw error;
        }
    }
}

async function getNews() {
    await ensureDataDirExists();
    try {
        const data = await fs.readFile(NEWS_FILE_PATH, 'utf-8');
        const jsonData = JSON.parse(data);
        // –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ —ç—Ç–æ –º–∞—Å—Å–∏–≤. –ï—Å–ª–∏ –Ω–µ—Ç, –∏–ª–∏ —Ñ–∞–π–ª –ø–æ–≤—Ä–µ–∂–¥–µ–Ω, –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—É—Å—Ç—ã–º –º–∞—Å—Å–∏–≤–æ–º.
        if (!Array.isArray(jsonData)) {
            console.warn(`–§–∞–π–ª ${NEWS_FILE_PATH} –Ω–µ —Å–æ–¥–µ—Ä–∂–∞–ª –º–∞—Å—Å–∏–≤. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—É—Å—Ç—ã–º –º–∞—Å—Å–∏–≤–æ–º.`);
            await saveNews([]);
            return [];
        }
        return jsonData;
    } catch (error) {
        if (error.code === 'ENOENT') { // –ï—Å–ª–∏ —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω
            await saveNews([]);
            return [];
        }
        if (error instanceof SyntaxError) { // –ï—Å–ª–∏ —Ñ–∞–π–ª –ø–æ–≤—Ä–µ–∂–¥–µ–Ω (–Ω–µ–≤–∞–ª–∏–¥–Ω—ã–π JSON)
            console.error(`–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ ${NEWS_FILE_PATH}. –§–∞–π–ª –º–æ–∂–µ—Ç –±—ã—Ç—å –ø–æ–≤—Ä–µ–∂–¥–µ–Ω. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—É—Å—Ç—ã–º –º–∞—Å—Å–∏–≤–æ–º.`, error);
            await saveNews([]);
            return [];
        }
        console.error("–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞ –Ω–æ–≤–æ—Å—Ç–µ–π:", error);
        throw error; // –î–ª—è –¥—Ä—É–≥–∏—Ö –æ—à–∏–±–æ–∫ –ª—É—á—à–µ –∏—Ö –ø—Ä–æ–±—Ä–æ—Å–∏—Ç—å, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å –ø—Ä–æ–±–ª–µ–º—É
    }
}

async function saveNews(news) {
    await ensureDataDirExists();
    try {
        await fs.writeFile(NEWS_FILE_PATH, JSON.stringify(news, null, 2), 'utf-8');
    } catch (error) {
        console.error("–û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ —Ñ–∞–π–ª–∞ –Ω–æ–≤–æ—Å—Ç–µ–π:", error);
        throw error;
    }
}

function isAdmin(req, res, next) {
    if (req.session && req.session.isAdmin) {
        return next();
    }
    res.status(401).json({ success: false, message: '–ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω' });
}

app.post('/admin/login', (req, res) => {
    const { username, password } = req.body;
    if (username === ADMIN_USERNAME && password === ADMIN_PASSWORD) {
        req.session.isAdmin = true;
        res.json({ success: true, message: '–í—Ö–æ–¥ —É—Å–ø–µ—à–µ–Ω' });
    } else {
        res.status(401).json({ success: false, message: '–ù–µ–≤–µ—Ä–Ω—ã–π –ª–æ–≥–∏–Ω –∏–ª–∏ –ø–∞—Ä–æ–ª—å' });
    }
});

app.get('/admin/logout', (req, res) => {
    req.session.destroy(err => {
        if (err) {
            return res.status(500).json({ success: false, message: '–ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–π—Ç–∏' });
        }
        res.json({ success: true, message: '–í—ã—Ö–æ–¥ —É—Å–ø–µ—à–µ–Ω' });
    });
});

app.get('/admin/auth-check', (req, res) => {
    if (req.session && req.session.isAdmin) {
        res.json({ isAuthenticated: true });
    } else {
        res.json({ isAuthenticated: false });
    }
});

app.get('/api/news', async (req, res) => {
    try {
        const news = await getNews();
        news.sort((a, b) => new Date(b.publishedDate) - new Date(a.publishedDate));
        res.json(news);
    } catch (error) {
        res.status(500).json({ message: '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–æ–≤–æ—Å—Ç–µ–π' });
    }
});

app.get('/api/news/:id', async (req, res) => {
    try {
        const newsId = req.params.id;
        const news = await getNews();
        const article = news.find(n => n.id === newsId);
        if (article) {
            res.json(article);
        } else {
            res.status(404).json({ message: '–ù–æ–≤–æ—Å—Ç—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞' });
        }
    } catch (error) {
        res.status(500).json({ message: '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–æ–≤–æ—Å—Ç–∏' });
    }
});


app.post('/api/news', isAdmin, async (req, res) => {
    try {
        const { title, content, imageUrl, author } = req.body;
        if (!title || !content) {
            return res.status(400).json({ message: '–ó–∞–≥–æ–ª–æ–≤–æ–∫ –∏ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã' });
        }
        const news = await getNews();
        const newArticle = {
            id: Date.now().toString(),
            title,
            content,
            imageUrl: imageUrl || '',
            author: author || '–†–µ–¥–∞–∫—Ü–∏—è',
            publishedDate: new Date().toISOString(),
            reactions: {
                "üëç": 0, "‚ù§Ô∏è": 0, "üòÇ": 0, "üòÆ": 0, "üò¢": 0, "üò†": 0
            }
        };
        news.push(newArticle);
        await saveNews(news);
        res.status(201).json(newArticle);
    } catch (error) {
        res.status(500).json({ message: '–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–æ–≤–æ—Å—Ç–∏' });
    }
});

app.put('/api/news/:id', isAdmin, async (req, res) => {
    try {
        const { id } = req.params;
        const { title, content, imageUrl, author } = req.body;
        let news = await getNews();
        const articleIndex = news.findIndex(article => article.id === id);

        if (articleIndex === -1) {
            return res.status(404).json({ message: '–ù–æ–≤–æ—Å—Ç—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞' });
        }

        const updatedArticle = {
            ...news[articleIndex],
            title: title || news[articleIndex].title,
            content: content || news[articleIndex].content,
            imageUrl: imageUrl !== undefined ? imageUrl : news[articleIndex].imageUrl,
            author: author !== undefined ? author : news[articleIndex].author,
        };
        news[articleIndex] = updatedArticle;
        await saveNews(news);
        res.json(updatedArticle);
    } catch (error) {
        res.status(500).json({ message: '–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ—Å—Ç–∏' });
    }
});

app.delete('/api/news/:id', isAdmin, async (req, res) => {
    try {
        const { id } = req.params;
        let news = await getNews();
        const filteredNews = news.filter(article => article.id !== id);

        if (news.length === filteredNews.length) {
            return res.status(404).json({ message: '–ù–æ–≤–æ—Å—Ç—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞' });
        }
        await saveNews(filteredNews);
        res.status(200).json({ success: true, message: '–ù–æ–≤–æ—Å—Ç—å —É–¥–∞–ª–µ–Ω–∞' });
    } catch (error) {
        res.status(500).json({ message: '–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –Ω–æ–≤–æ—Å—Ç–∏' });
    }
});

app.post('/api/news/:id/react', async (req, res) => {
    try {
        const newsId = req.params.id;
        const { reaction } = req.body; 

        if (!reaction) {
            return res.status(400).json({ message: '–†–µ–∞–∫—Ü–∏—è –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∞' });
        }

        let news = await getNews();
        const articleIndex = news.findIndex(n => n.id === newsId);

        if (articleIndex === -1) {
            return res.status(404).json({ message: '–ù–æ–≤–æ—Å—Ç—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞' });
        }

        if (!news[articleIndex].reactions) {
            news[articleIndex].reactions = { "üëç": 0, "‚ù§Ô∏è": 0, "üòÇ": 0, "üòÆ": 0, "üò¢": 0, "üò†": 0 };
        }
        if (news[articleIndex].reactions[reaction] === undefined) {
            return res.status(400).json({ message: '–ù–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–π —Ç–∏–ø —Ä–µ–∞–∫—Ü–∏–∏' });
        }

        news[articleIndex].reactions[reaction]++;
        await saveNews(news);
        res.json({ success: true, reactions: news[articleIndex].reactions });

    } catch (error) {
        console.error("Error reacting to news:", error);
        res.status(500).json({ message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ä–µ–∞–∫—Ü–∏–∏' });
    }
});


app.listen(PORT, () => {
    console.log(`Server running on http://localhost:${PORT}`);
    if (process.env.NODE_ENV === 'production') {
        console.log("–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∑–∞–ø—É—â–µ–Ω–æ –≤ —Ä–µ–∂–∏–º–µ –ø—Ä–æ–¥–∞–∫—à–µ–Ω–∞.");
        if (ADMIN_USERNAME === 'RussianSocialist6' || ADMIN_PASSWORD === 'RussianSocialist1234567890') {
            console.warn("–ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–ï: –ò—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –≤ –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏–∑–º–µ–Ω–∏—Ç–µ ADMIN_USERNAME –∏ ADMIN_PASSWORD —á–µ—Ä–µ–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è.");
        }
    }
});