// netlify/functions/news-admin.js
const express = require('express');
const serverless = require('serverless-http');
const { getNews, saveNews /*, isAdmin */ } = require('./_utils'); // isAdmin –ø–æ–∫–∞ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º

const app = express();
const router = express.Router();

app.use(express.json());
app.use(express.urlencoded({ extended: true }));

// –í–ê–ñ–ù–û: –£–±—Ä–∞–ª–∏ isAdmin –¥–ª—è —É–ø—Ä–æ—â–µ–Ω–∏—è –∏–∑-–∑–∞ –ø—Ä–æ–±–ª–µ–º —Å —Å–µ—Å—Å–∏—è–º–∏ –≤ serverless.
// –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∑–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø—Ä–æ–≤–µ—Ä–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, —á–µ—Ä–µ–∑ JWT).

// POST /api/news - —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤–æ—Å—Ç—å
router.post('/api/news', /* isAdmin, */ async (req, res) => {
    try {
        const { title, content, imageUrl, author } = req.body;
        if (!title || !content) {
            return res.status(400).json({ message: '–ó–∞–≥–æ–ª–æ–≤–æ–∫ –∏ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã' });
        }
        const news = await getNews();
        const newArticle = {
            id: Date.now().toString(),
            title,
            content,
            imageUrl: imageUrl || '',
            author: author || '–†–µ–¥–∞–∫—Ü–∏—è',
            publishedDate: new Date().toISOString(),
            reactions: { "üëç": 0, "‚ù§Ô∏è": 0, "üòÇ": 0, "üòÆ": 0, "üò¢": 0, "üò†": 0 }
        };
        news.push(newArticle);
        await saveNews(news); // –ü–æ–º–Ω–∏–º, —á—Ç–æ —ç—Ç–æ –Ω–µ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—Å—è –Ω–∞–¥–æ–ª–≥–æ
        res.status(201).json(newArticle);
    } catch (error) {
        res.status(500).json({ message: '–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–æ–≤–æ—Å—Ç–∏' });
    }
});

// GET /api/news/:id - –ø–æ–ª—É—á–∏—Ç—å –æ–¥–Ω—É –Ω–æ–≤–æ—Å—Ç—å (–¥–ª—è –∞–¥–º–∏–Ω–∫–∏, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ)
router.get('/api/news/:id', /* isAdmin, */ async (req, res) => {
    try {
        const newsId = req.params.id;
        const news = await getNews();
        const article = news.find(n => n.id === newsId);
        if (article) {
            res.json(article);
        } else {
            res.status(404).json({ message: '–ù–æ–≤–æ—Å—Ç—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞' });
        }
    } catch (error) {
        res.status(500).json({ message: '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–æ–≤–æ—Å—Ç–∏' });
    }
});

// PUT /api/news/:id - –æ–±–Ω–æ–≤–∏—Ç—å –Ω–æ–≤–æ—Å—Ç—å
router.put('/api/news/:id', /* isAdmin, */ async (req, res) => {
    try {
        const { id } = req.params;
        const { title, content, imageUrl, author } = req.body;
        let news = await getNews();
        const articleIndex = news.findIndex(article => article.id === id);

        if (articleIndex === -1) {
            return res.status(404).json({ message: '–ù–æ–≤–æ—Å—Ç—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞' });
        }

        const updatedArticle = {
            ...news[articleIndex],
            title: title || news[articleIndex].title,
            content: content || news[articleIndex].content,
            imageUrl: imageUrl !== undefined ? imageUrl : news[articleIndex].imageUrl,
            author: author !== undefined ? author : news[articleIndex].author,
        };
        news[articleIndex] = updatedArticle;
        await saveNews(news); // –ü–æ–º–Ω–∏–º, —á—Ç–æ —ç—Ç–æ –Ω–µ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—Å—è –Ω–∞–¥–æ–ª–≥–æ
        res.json(updatedArticle);
    } catch (error) {
        res.status(500).json({ message: '–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ—Å—Ç–∏' });
    }
});

// DELETE /api/news/:id - —É–¥–∞–ª–∏—Ç—å –Ω–æ–≤–æ—Å—Ç—å
router.delete('/api/news/:id', /* isAdmin, */ async (req, res) => {
    try {
        const { id } = req.params;
        let news = await getNews();
        const filteredNews = news.filter(article => article.id !== id);

        if (news.length === filteredNews.length) {
            return res.status(404).json({ message: '–ù–æ–≤–æ—Å—Ç—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞' });
        }
        await saveNews(filteredNews); // –ü–æ–º–Ω–∏–º, —á—Ç–æ —ç—Ç–æ –Ω–µ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—Å—è –Ω–∞–¥–æ–ª–≥–æ
        res.status(200).json({ success: true, message: '–ù–æ–≤–æ—Å—Ç—å —É–¥–∞–ª–µ–Ω–∞' });
    } catch (error) {
        res.status(500).json({ message: '–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –Ω–æ–≤–æ—Å—Ç–∏' });
    }
});

app.use('/', router);
module.exports.handler = serverless(app);